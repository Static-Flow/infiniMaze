<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>{{.title}}</title>
  <script src="https://cdn.jsdelivr.net/pako/1.0.3/pako.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
  <script>
    //REMEMBER: CANVAS coordinates are upside down. Going "North" and "West" are actually LOWER Y,X values even though server-side it's a positive movement.
    let globalX = parseInt({{.globalLocationX}})
    let globalY = parseInt({{.globalLocationY}})
    let canvas;
    let ctx;
    let img = new Image();
    let x = parseInt({{(index .position 0)}})
    let y = parseInt({{(index .position 1)}})
    const dx = 20;
    const dy = 20;
    const WIDTH = 1020;
    const HEIGHT = 1020;
    const imgSrcUrl = "/mazeImg";
    const mazeLocUrl = "/move";

    function init() {
      document.getElementById("globalPosition").innerText = "InfiniMaze Global Position: " + globalX.toString() + " : " + globalY.toString()
      canvas = document.getElementById("mazeCanvas");
      ctx = canvas.getContext("2d");
      img.src = imgSrcUrl;
      return setInterval(draw, 10);
    }

    function rect(x,y,w,h) {
      ctx.beginPath();
      ctx.rect(x,y,w,h);
      ctx.closePath();
      ctx.fill();
    }

    function clear() {
      ctx.clearRect(0, 0, WIDTH, HEIGHT);
      ctx.drawImage(img, 0, 0);
    }

    function draw() {
      clear();
      ctx.fillStyle = "purple";
      rect(x, y, 20,20);
    }

    function checkCollision() {
      const pix = ctx.getImageData(x, y, 1, 1).data;
      if(pix[0]+pix[1]+pix[2] === 0){
        //wall collision
        return 1;
      } else if(pix[0]+pix[1]+pix[2] === 255) {
        //exit collision
        console.log("Hit door")
        return 2;
      } else {
        //path collision
        return 0;
      }
    }

    function redrawNewMaze() {
      img = new Image();
      img.src = imgSrcUrl;
      clear();
    }

    function updateDisplay() {
      document.getElementById("globalPosition").innerText = "InfiniMaze Global Position: " + globalX.toString() + " : " + globalY.toString()
    }

    window.addEventListener("keydown", function(event) {
      let updateMazeApiCall;
      switch (event.key) {
        case "ArrowUp":
          if (y - dy >= 0) {
            y -= dy;
            clear();
            switch (checkCollision()) {
              case 0:
                let updateCurrentMazeLocApiCall = $.post(mazeLocUrl, {deltaX: x, deltaY: y});
                updateCurrentMazeLocApiCall.fail(function () {
                  y += dy;
                })
                break;
              case 1:
                y += dy;
                break;
              case 2:
                globalY+=1;
                updateMazeApiCall = $.post(imgSrcUrl, {deltaX: globalX, deltaY: globalY} );
                updateMazeApiCall.done(function () {
                  y = HEIGHT-40;
                  redrawNewMaze();
                });
                updateMazeApiCall.fail(function () {
                  globalY-=1;
                  y += dy;
                  updateDisplay();
                })
                break;
            }
          }
          break;
        case "ArrowDown":
          if (y + dy < HEIGHT) {
            y += dy;
            clear();
            switch (checkCollision()) {
              case 0:
                let updateCurrentMazeLocApiCall = $.post(mazeLocUrl, {deltaX: x, deltaY: y});
                updateCurrentMazeLocApiCall.fail(function () {
                  y -= dy;
                })
                break;
              case 1:
                y -= dy;
                break;
              case 2:
                globalY-=1;
                updateMazeApiCall = $.post(imgSrcUrl, {deltaX: globalX, deltaY: globalY} );
                updateMazeApiCall.done(function () {
                  y = 20;
                  redrawNewMaze();
                });
                updateMazeApiCall.fail(function () {
                  globalY+=1;
                  y -= dy;
                  updateDisplay();
                })
                break;
            }
          }
          break;
        case "ArrowLeft":
          if (x - dx >= 0) {
            x -= dx;
            clear();
            switch (checkCollision()) {
              case 0:
                let updateCurrentMazeLocApiCall = $.post(mazeLocUrl, {deltaX: x, deltaY: y});
                updateCurrentMazeLocApiCall.fail(function () {
                  x += dx;
                })
                break;
              case 1:
                x += dx;
                break;
              case 2:
                globalX-=1;
                updateMazeApiCall = $.post(imgSrcUrl, {deltaX: globalX, deltaY: globalY} );
                updateMazeApiCall.done(function () {
                  x = WIDTH-40;
                  redrawNewMaze();
                });
                updateMazeApiCall.fail(function () {
                  globalX+=1;
                  x += dx;
                  updateDisplay();
                })
                break;
            }
          }
          break;
        case "ArrowRight":
          if (x + dx < WIDTH) {
            x += dx;
            clear();
            switch (checkCollision()) {
              case 0:
                let updateCurrentMazeLocApiCall = $.post(mazeLocUrl, {deltaX: x, deltaY: y});
                updateCurrentMazeLocApiCall.fail(function () {
                  x -= dx;
                })
                break;
              case 1:
                x -= dx;
                break;
              case 2:
                globalX+=1;
                updateMazeApiCall = $.post(imgSrcUrl, {deltaX: globalX, deltaY: globalY} );
                updateMazeApiCall.done(function () {
                  x = 20;
                  redrawNewMaze();
                });
                updateMazeApiCall.fail(function () {
                  globalX-=1;
                  x -= dx;
                  updateDisplay();
                })
                break;
            }
          }
          break;
      }
      updateDisplay();
    }, true);


  </script>
</head>
<body onload="init()" style="background-color: darkslategrey;">
<div style="
    width: 1020px;
    height: 1020px;
    margin: 100px auto;">
  <div style="
    text-align: center;
    font-weight: bold;
    margin-left: 36%;
    font-size: 15pt;
    block-size: fit-content;
    width: fit-content;
    background-color: #4F2F2F;">
    <p id="globalPosition"></p>
  </div>
<canvas id="mazeCanvas" width="1020" height="1020">This text is displayed if your browser does not support HTML5 Canvas.</canvas>
</div>
</body>
</html>